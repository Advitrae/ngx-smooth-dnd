{
  "version": 3,
  "file": "ngx-smooth-dnd.umd.min.js",
  "sources": [
    "ng://ngx-smooth-dnd/out/src/draggable/draggable.component.ts",
    "ng://ngx-smooth-dnd/out/src/container/container.component.ts",
    "ng://ngx-smooth-dnd/out/src/ngx-smooth-dnd.module.ts"
  ],
  "sourcesContent": [
    "import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { constants } from 'smooth-dnd';\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst constantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'smooth-dnd-draggable',\r\n  template: `<ng-container #draggableWrapper>\r\n    <ng-content></ng-content>\r\n</ng-container>`\r\n})\r\nexport class DraggableComponent implements AfterViewInit {\r\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\r\n  ngAfterViewInit() {\r\n    this.wrapper.nativeElement.parentNode.className = constants.wrapperClass;\r\n  }\r\n}\r\n",
    "import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, NgZone } from '@angular/core';\r\nimport { DraggableComponent } from '../draggable/draggable.component';\r\nimport SmoothDnD, { constants, dropHandlers } from 'smooth-dnd';\r\nimport { wrappedError } from '@angular/core/src/error_handler';\r\n\r\nSmoothDnD.wrapChild = (child) => {\r\n  return child;\r\n}\r\n\r\nSmoothDnD.dropHandler =  dropHandlers.reactDropHandler().handler;\r\n\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst wrapperConstantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n// tslint:disable:no-output-on-prefix\r\nexport interface IDropResult {\r\n  removedIndex: number;\r\n  addedIndex: number;\r\n  payload: IPayload;\r\n  element: Element;\r\n}\r\n\r\nexport interface IDragEvent {\r\n  isSource: boolean;\r\n  payload: IPayload;\r\n  willAcceptDrop: boolean;\r\n}\r\n\r\nexport type IPayload = any;\r\n\r\nexport interface IContainerOptions {\r\n  orientation?: string;\r\n  behaviour?: string;\r\n  groupName?: string;\r\n  lockAxis?: string;\r\n  dragHandleSelector?: string;\r\n  nonDragAreaSelector?: string;\r\n  dragBeginDelay?: number;\r\n  animationDuration?: number;\r\n  autoScrollEnabled?: boolean;\r\n  dragClass?: string;\r\n  dropClass?: string;\r\n  onDragStart?: (dragEvent: IDragEvent) => void;\r\n  onDragEnd?: (dragEvent: IDragEvent) => void;\r\n  onDrop?: (dropResult: IDropResult) => void;\r\n  getChildPayload?: (index: number) => {};\r\n  shouldAnimateDrop?: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  shouldAcceptDrop?: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  onDragEnter?: () => void;\r\n  onDragLeave?: () => void;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"smooth-dnd-container\",\r\n  template: `<div #container>\r\n    <ng-content></ng-content>\r\n</div>`\r\n})\r\nexport class ContainerComponent implements AfterViewInit, OnDestroy {\r\n  private container: any;\r\n  @ContentChildren(DraggableComponent)\r\n  draggables: QueryList<DraggableComponent>;\r\n  @ViewChild(\"container\") containerElementRef: ElementRef;\r\n\r\n  @Input(\"orientation\") orientation;\r\n  @Input(\"behaviour\") behaviour;\r\n  @Input(\"groupName\") groupName;\r\n  @Input(\"lockAxis\") lockAxis;\r\n  @Input(\"dragHandleSelector\") dragHandleSelector;\r\n  @Input(\"nonDragAreaSelector\") nonDragAreaSelector;\r\n  @Input(\"dragBeginDelay\") dragBeginDelay;\r\n  @Input(\"animationDuration\") animationDuration;\r\n  @Input(\"autoScrollEnabled\") autoScrollEnabled;\r\n  @Input(\"dragClass\") dragClass;\r\n  @Input(\"dropClass\") dropClass;\r\n\r\n  @Output() dragStart = new EventEmitter<IDragEvent>();\r\n  @Output() dragEnd = new EventEmitter<IDragEvent>();\r\n  @Output() drop = new EventEmitter<IDropResult>();\r\n  @Input() getChildPayload: (index: number) => {};\r\n  @Input()\r\n  shouldAnimateDrop: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  @Input()\r\n  shouldAcceptDrop: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  @Output() dragEnter = new EventEmitter();\r\n  @Output() dragLeave = new EventEmitter();\r\n\r\n  constructor(private _ngZone: NgZone) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.container = SmoothDnD(\r\n      this.containerElementRef.nativeElement,\r\n      this.getOptions()\r\n    );\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.container.dispose();\r\n  }\r\n\r\n  private getOptions(): IContainerOptions {\r\n    const options: IContainerOptions = {};\r\n    if (this.orientation) options.orientation = this.orientation;\r\n    if (this.behaviour) options.behaviour = this.behaviour;\r\n    if (this.groupName) options.groupName = this.groupName;\r\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\r\n    if (this.dragHandleSelector)\r\n      options.dragHandleSelector = this.dragHandleSelector;\r\n    if (this.nonDragAreaSelector)\r\n      options.nonDragAreaSelector = this.nonDragAreaSelector;\r\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\r\n    if (this.animationDuration)\r\n      options.animationDuration = this.animationDuration;\r\n    if (this.autoScrollEnabled)\r\n      options.autoScrollEnabled = this.autoScrollEnabled;\r\n    if (this.dragClass) options.dragClass = this.dragClass;\r\n    if (this.dropClass) options.dropClass = this.dropClass;\r\n\r\n    if (this.dragStart)\r\n      options.onDragStart = (event: IDragEvent) => {\r\n        this.getNgZone(() => {\r\n          this.dragStart.emit(event);\r\n        });\r\n      };\r\n    \r\n    if (this.dragEnd)\r\n      options.onDragEnd = (event: IDragEvent) => {\r\n        this.getNgZone(() => {\r\n          this.dragEnd.emit(event);\r\n        });\r\n      };\r\n\r\n    if (this.drop)\r\n      options.onDrop = (dropResult: IDropResult) => {\r\n        this.getNgZone(() => {\r\n          this.drop.emit(dropResult);\r\n        });\r\n      };\r\n\r\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\r\n    if (this.shouldAnimateDrop)\r\n      options.shouldAnimateDrop = this.shouldAnimateDrop;\r\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\r\n\r\n    if (this.dragEnter)\r\n      options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\r\n    if (this.dragLeave)\r\n      options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\r\n\r\n    return options;\r\n  }\r\n\r\n  private getNgZone(clb) {\r\n    this._ngZone.run(() => {\r\n      clb();\r\n    });\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './container/container.component';\r\nimport { DraggableComponent } from './draggable/draggable.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ContainerComponent, DraggableComponent],\r\n  exports: [ContainerComponent, DraggableComponent]\r\n})\r\nexport class NgxSmoothDnDModule {}\r\n"
  ],
  "names": [
    "DraggableComponent",
    "prototype",
    "ngAfterViewInit",
    "this",
    "wrapper",
    "nativeElement",
    "parentNode",
    "className",
    "constants",
    "wrapperClass",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ViewChild",
    "SmoothDnD",
    "wrapChild",
    "child",
    "dropHandler",
    "dropHandlers",
    "reactDropHandler",
    "handler",
    "ContainerComponent",
    "_ngZone",
    "dragStart",
    "EventEmitter",
    "dragEnd",
    "drop",
    "dragEnter",
    "dragLeave",
    "container",
    "containerElementRef",
    "getOptions",
    "ngOnDestroy",
    "dispose",
    "_this",
    "options",
    "orientation",
    "behaviour",
    "groupName",
    "lockAxis",
    "dragHandleSelector",
    "nonDragAreaSelector",
    "dragBeginDelay",
    "animationDuration",
    "autoScrollEnabled",
    "dragClass",
    "dropClass",
    "onDragStart",
    "event",
    "getNgZone",
    "emit",
    "onDragEnd",
    "onDrop",
    "dropResult",
    "getChildPayload",
    "shouldAnimateDrop",
    "shouldAcceptDrop",
    "onDragEnter",
    "onDragLeave",
    "clb",
    "run",
    "NgZone",
    "draggables",
    "ContentChildren",
    "Input",
    "Output",
    "NgxSmoothDnDModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}

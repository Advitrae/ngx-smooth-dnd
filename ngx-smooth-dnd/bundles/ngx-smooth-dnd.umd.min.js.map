{
  "version": 3,
  "file": "ngx-smooth-dnd.umd.min.js",
  "sources": [
    "ng://ngx-smooth-dnd/out/src/draggable/draggable.component.ts",
    "ng://ngx-smooth-dnd/out/src/container/container.component.ts",
    "ng://ngx-smooth-dnd/out/src/ngx-smooth-dnd.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, OnChanges, SimpleChanges, Output, ViewEncapsulation, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { constants } from 'smooth-dnd';\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst constantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: '[draggable]',\r\n  template: `<div #draggableWrapper>\r\n    <ng-content></ng-content>\r\n</div>`\r\n})\r\nexport class DraggableComponent implements AfterViewInit {\r\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\r\n  classList = `${wrapperClass} ${animationClass}`\r\n\r\n  ngAfterViewInit() {\r\n    this.wrapper.nativeElement.parentElement.className = 'smooth-dnd-draggable-wrapper';\r\n  }\r\n}\r\n",
    "import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, OnChanges, SimpleChanges, AfterContentChecked, NgZone } from '@angular/core';\r\nimport { DraggableComponent } from '../draggable/draggable.component';\r\nimport SmoothDnD, { constants, dropHandlers } from 'smooth-dnd';\r\nimport { wrappedError } from '@angular/core/src/error_handler';\r\n\r\nSmoothDnD.wrapChild = (child) => {\r\n  return child;\r\n}\r\n\r\nSmoothDnD.dropHandler =  dropHandlers.reactDropHandler().handler;\r\n\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst wrapperConstantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n// tslint:disable:no-output-on-prefix\r\nexport interface IDropParams {\r\n  removedIndex: number,\r\n  addedIndex: number,\r\n  payload: any,\r\n  element: Element,\r\n}\r\n\r\nexport type IPayload = any;\r\n\r\nexport interface IContainerOptions {\r\n  orientation?: string;\r\n  behaviour?: string;\r\n  groupName?: string;\r\n  lockAxis?: string;\r\n  dragHandleSelector?: string;\r\n  nonDragAreaSelector?: string;\r\n  dragBeginDelay?: number;\r\n  animationDuration?: number;\r\n  autoScrollEnabled?: boolean;\r\n  dragClass?: string;\r\n  dropClass?: string;\r\n  onDragStart?: (index: number, payload: IPayload) => void;\r\n  onDrop?: (dropResult: IDropParams) => void;\r\n  getChildPayload?: (index: number) => {};\r\n  shouldAnimateDrop?: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  shouldAcceptDrop?: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  onDragEnter?: () => void;\r\n  onDragLeave?: () => void;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: '[container]',\r\n  template: `<div #container>\r\n    <ng-content></ng-content>\r\n</div>`\r\n})\r\nexport class ContainerComponent implements AfterViewInit, OnDestroy {  \r\n  private container: any;\r\n  @ContentChildren(DraggableComponent) draggables: QueryList<DraggableComponent>;\r\n  @ViewChild('container') containerElementRef: ElementRef;\r\n\r\n  @Input('orientation') orientation;\r\n  @Input('behaviour') behaviour;\r\n  @Input('groupName') groupName;\r\n  @Input('lockAxis') lockAxis;\r\n  @Input('dragHandleSelector') dragHandleSelector;\r\n  @Input('nonDragAreaSelector') nonDragAreaSelector;\r\n  @Input('dragBeginDelay') dragBeginDelay;\r\n  @Input('animationDuration') animationDuration;\r\n  @Input('autoScrollEnabled') autoScrollEnabled;\r\n  @Input('dragClass') dragClass;\r\n  @Input('dropClass') dropClass;\r\n\r\n  @Output() dragStart = new EventEmitter<{ index: number; payload: IPayload}>();\r\n  @Output() drop = new EventEmitter<IDropParams>();\r\n  @Input() getChildPayload: (index: number) => {};\r\n  @Input() shouldAnimateDrop: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  @Input() shouldAcceptDrop: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  @Output() dragEnter = new EventEmitter();\r\n  @Output() dragLeave = new EventEmitter();\r\n\r\n  wrapperClassList = Object.assign({}, wrapperConstantClasses);\r\n\r\n  constructor(private _ngZone: NgZone) { };\r\n\r\n  ngAfterViewInit() {\r\n    this.container = SmoothDnD(this.containerElementRef.nativeElement, this.getOptions());\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.container.dispose();\r\n  }\r\n\r\n  private getOptions(): IContainerOptions {    \r\n    const options: IContainerOptions = {};\r\n    if (this.orientation) options.orientation = this.orientation;\r\n    if (this.behaviour) options.behaviour = this.behaviour;\r\n    if (this.groupName) options.groupName = this.groupName;\r\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\r\n    if (this.dragHandleSelector) options.dragHandleSelector = this.dragHandleSelector;\r\n    if (this.nonDragAreaSelector) options.nonDragAreaSelector = this.nonDragAreaSelector;\r\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\r\n    if (this.animationDuration) options.animationDuration = this.animationDuration;\r\n    if (this.autoScrollEnabled) options.autoScrollEnabled = this.autoScrollEnabled;\r\n    if (this.dragClass) options.dragClass = this.dragClass;\r\n    if (this.dropClass) options.dropClass = this.dropClass;\r\n    \r\n    if (this.dragStart) options.onDragStart = (index: number, payload: IPayload) => {\r\n      this.getNgZone(() => {\r\n        this.dragStart.emit({ index, payload });\r\n      })\r\n    };\r\n\r\n    if (this.drop) options.onDrop = (dropResult: IDropParams) => {\r\n      this.getNgZone(() => {\r\n        this.drop.emit(dropResult);\r\n      })\r\n    };\r\n\r\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\r\n    if (this.shouldAnimateDrop) options.shouldAnimateDrop = this.shouldAnimateDrop;\r\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\r\n\r\n    if (this.dragEnter) options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\r\n    if (this.dragLeave) options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\r\n\r\n    return options;\r\n  }\r\n\r\n  private getNgZone(clb) {\r\n    this._ngZone.run(() => {\r\n      clb();\r\n    });\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './container/container.component';\r\nimport { DraggableComponent } from './draggable/draggable.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ContainerComponent, DraggableComponent],\r\n  exports: [ContainerComponent, DraggableComponent]\r\n})\r\nexport class NgxSmoothDnDModule {}\r\n"
  ],
  "names": [
    "wrapperClass",
    "constants",
    "animationClass",
    "DraggableComponent",
    "this",
    "classList",
    "prototype",
    "ngAfterViewInit",
    "wrapper",
    "nativeElement",
    "parentElement",
    "className",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ViewChild",
    "SmoothDnD",
    "wrapChild",
    "child",
    "dropHandler",
    "dropHandlers",
    "reactDropHandler",
    "handler",
    "wrapperClass$1",
    "animationClass$1",
    "wrapperConstantClasses",
    "_a",
    "ContainerComponent",
    "_ngZone",
    "dragStart",
    "EventEmitter",
    "drop",
    "dragEnter",
    "dragLeave",
    "wrapperClassList",
    "Object",
    "assign",
    "container",
    "containerElementRef",
    "getOptions",
    "ngOnDestroy",
    "dispose",
    "_this",
    "options",
    "orientation",
    "behaviour",
    "groupName",
    "lockAxis",
    "dragHandleSelector",
    "nonDragAreaSelector",
    "dragBeginDelay",
    "animationDuration",
    "autoScrollEnabled",
    "dragClass",
    "dropClass",
    "onDragStart",
    "index",
    "payload",
    "getNgZone",
    "emit",
    "onDrop",
    "dropResult",
    "getChildPayload",
    "shouldAnimateDrop",
    "shouldAcceptDrop",
    "onDragEnter",
    "onDragLeave",
    "clb",
    "run",
    "NgZone",
    "draggables",
    "ContentChildren",
    "Input",
    "Output",
    "NgxSmoothDnDModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}

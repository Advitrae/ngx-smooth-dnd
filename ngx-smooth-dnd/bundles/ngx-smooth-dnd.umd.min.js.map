{"version":3,"sources":["ng://ngx-smooth-dnd/src/draggable/draggable.component.ts","ng://ngx-smooth-dnd/src/container/container.component.ts","ng://ngx-smooth-dnd/src/ngx-smooth-dnd.module.ts"],"names":["wrapperClass","SmoothDnD","constants","animationClass","_a","DraggableComponent","prototype","ngAfterViewInit","this","wrapper","nativeElement","parentNode","className","Component","args","selector","template","ViewChild","SmoothDnD__default","wrapChild","child","dropHandler","dropHandlers","reactDropHandler","handler","_a$1","ContainerComponent","_ngZone","EventEmitter","container","containerElementRef","getOptions","ngOnDestroy","dispose","options","orientation","behaviour","groupName","lockAxis","dragHandleSelector","nonDragAreaSelector","dragBeginDelay","animationDuration","autoScrollEnabled","dragClass","dropClass","dragStart","onDragStart","event","_this","getNgZone","emit","dragEnd","onDragEnd","drop","onDrop","dropResult","getChildPayload","shouldAnimateDrop","shouldAcceptDrop","dragEnter","onDragEnter","dragLeave","onDragLeave","dropReady","onDropReady","clb","run","NgZone","ContentChildren","Input","Output","NgxSmoothDnDModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { constants } from 'smooth-dnd';\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst constantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'smooth-dnd-draggable',\r\n  template: `<ng-container #draggableWrapper>\r\n    <ng-content></ng-content>\r\n</ng-container>`\r\n})\r\nexport class DraggableComponent implements AfterViewInit {\r\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\r\n  ngAfterViewInit() {\r\n    this.wrapper.nativeElement.parentNode.className = constants.wrapperClass;\r\n  }\r\n}\r\n","import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, NgZone } from '@angular/core';\r\nimport { DraggableComponent } from '../draggable/draggable.component';\r\nimport SmoothDnD, { constants, dropHandlers } from 'smooth-dnd';\r\nimport { wrappedError } from '@angular/core/src/error_handler';\r\n\r\nSmoothDnD.wrapChild = (child) => {\r\n  return child;\r\n}\r\n\r\nSmoothDnD.dropHandler =  dropHandlers.reactDropHandler().handler;\r\n\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst wrapperConstantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n// tslint:disable:no-output-on-prefix\r\nexport interface IDropResult {\r\n  removedIndex: number;\r\n  addedIndex: number;\r\n  payload: IPayload;\r\n  element: Element;\r\n}\r\n\r\nexport interface IDragEvent {\r\n  isSource: boolean;\r\n  payload: IPayload;\r\n  willAcceptDrop: boolean;\r\n}\r\n\r\nexport type IPayload = any;\r\n\r\nexport interface IContainerOptions {\r\n  orientation?: string;\r\n  behaviour?: string;\r\n  groupName?: string;\r\n  lockAxis?: string;\r\n  dragHandleSelector?: string;\r\n  nonDragAreaSelector?: string;\r\n  dragBeginDelay?: number;\r\n  animationDuration?: number;\r\n  autoScrollEnabled?: boolean;\r\n  dragClass?: string;\r\n  dropClass?: string;\r\n  onDragStart?: (dragEvent: IDragEvent) => void;\r\n  onDragEnd?: (dragEvent: IDragEvent) => void;\r\n  onDrop?: (dropResult: IDropResult) => void;\r\n  getChildPayload?: (index: number) => {};\r\n  shouldAnimateDrop?: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  shouldAcceptDrop?: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  onDragEnter?: () => void;\r\n  onDragLeave?: () => void;\r\n  onDropReady?: (dropResult: IDropResult) => void;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: \"smooth-dnd-container\",\r\n  template: `<div #container>\r\n    <ng-content></ng-content>\r\n</div>`\r\n})\r\nexport class ContainerComponent implements AfterViewInit, OnDestroy {\r\n  private container: any;\r\n  @ContentChildren(DraggableComponent)\r\n  draggables: QueryList<DraggableComponent>;\r\n  @ViewChild(\"container\") containerElementRef: ElementRef;\r\n\r\n  @Input(\"orientation\") orientation;\r\n  @Input(\"behaviour\") behaviour;\r\n  @Input(\"groupName\") groupName;\r\n  @Input(\"lockAxis\") lockAxis;\r\n  @Input(\"dragHandleSelector\") dragHandleSelector;\r\n  @Input(\"nonDragAreaSelector\") nonDragAreaSelector;\r\n  @Input(\"dragBeginDelay\") dragBeginDelay;\r\n  @Input(\"animationDuration\") animationDuration;\r\n  @Input(\"autoScrollEnabled\") autoScrollEnabled;\r\n  @Input(\"dragClass\") dragClass;\r\n  @Input(\"dropClass\") dropClass;\r\n\r\n  @Output() dragStart = new EventEmitter<IDragEvent>();\r\n  @Output() dragEnd = new EventEmitter<IDragEvent>();\r\n  @Output() drop = new EventEmitter<IDropResult>();\r\n  @Output() dropReady = new EventEmitter<IDropResult>();\r\n  @Input() getChildPayload: (index: number) => {};\r\n  @Input()\r\n  shouldAnimateDrop: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  @Input()\r\n  shouldAcceptDrop: (\r\n    sourceContainerOptions: IContainerOptions,\r\n    payload: IPayload\r\n  ) => boolean;\r\n  @Output() dragEnter = new EventEmitter();\r\n  @Output() dragLeave = new EventEmitter();\r\n\r\n  constructor(private _ngZone: NgZone) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.container = SmoothDnD(\r\n      this.containerElementRef.nativeElement,\r\n      this.getOptions()\r\n    );\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.container.dispose();\r\n  }\r\n\r\n  private getOptions(): IContainerOptions {\r\n    const options: IContainerOptions = {};\r\n    if (this.orientation) options.orientation = this.orientation;\r\n    if (this.behaviour) options.behaviour = this.behaviour;\r\n    if (this.groupName) options.groupName = this.groupName;\r\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\r\n    if (this.dragHandleSelector)\r\n      options.dragHandleSelector = this.dragHandleSelector;\r\n    if (this.nonDragAreaSelector)\r\n      options.nonDragAreaSelector = this.nonDragAreaSelector;\r\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\r\n    if (this.animationDuration)\r\n      options.animationDuration = this.animationDuration;\r\n    if (this.autoScrollEnabled)\r\n      options.autoScrollEnabled = this.autoScrollEnabled;\r\n    if (this.dragClass) options.dragClass = this.dragClass;\r\n    if (this.dropClass) options.dropClass = this.dropClass;\r\n\r\n    if (this.dragStart)\r\n      options.onDragStart = (event: IDragEvent) => {\r\n        this.getNgZone(() => {\r\n          this.dragStart.emit(event);\r\n        });\r\n      };\r\n    \r\n    if (this.dragEnd)\r\n      options.onDragEnd = (event: IDragEvent) => {\r\n        this.getNgZone(() => {\r\n          this.dragEnd.emit(event);\r\n        });\r\n      };\r\n\r\n    if (this.drop)\r\n      options.onDrop = (dropResult: IDropResult) => {\r\n        this.getNgZone(() => {\r\n          this.drop.emit(dropResult);\r\n        });\r\n      };\r\n\r\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\r\n    if (this.shouldAnimateDrop)\r\n      options.shouldAnimateDrop = this.shouldAnimateDrop;\r\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\r\n\r\n    if (this.dragEnter)\r\n      options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\r\n    if (this.dragLeave)\r\n      options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\r\n\r\n    if (this.dropReady)\r\n      options.onDropReady = (dropResult: IDropResult) => {\r\n        this.getNgZone(() => {\r\n          this.dropReady.emit(dropResult);\r\n        });\r\n      };\r\n\r\n    return options;\r\n  }\r\n\r\n  private getNgZone(clb) {\r\n    this._ngZone.run(() => {\r\n      clb();\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './container/container.component';\r\nimport { DraggableComponent } from './draggable/draggable.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ContainerComponent, DraggableComponent],\r\n  exports: [ContainerComponent, DraggableComponent]\r\n})\r\nexport class NgxSmoothDnDModule {}\r\n"]}
{
  "version": 3,
  "file": "ngx-smooth-dnd.umd.min.js",
  "sources": [
    "ng://ngx-smooth-dnd/out/src/draggable/draggable.component.ts",
    "ng://ngx-smooth-dnd/out/src/container/container.component.ts",
    "ng://ngx-smooth-dnd/out/src/ngx-smooth-dnd.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, OnChanges, SimpleChanges, Output, ViewEncapsulation, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\r\nimport { constants } from 'smooth-dnd';\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst constantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'smooth-dnd-draggable',\r\n  template: `<ng-container #draggableWrapper>\r\n    <ng-content></ng-content>\r\n</ng-container>`\r\n})\r\nexport class DraggableComponent implements AfterViewInit {\r\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\r\n  classList = `${wrapperClass} ${animationClass}`\r\n\r\n  ngAfterViewInit() {\r\n    this.wrapper.nativeElement.parentElement.className = constants.wrapperClass;\r\n  }\r\n}\r\n",
    "import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, OnChanges, SimpleChanges, AfterContentChecked, NgZone } from '@angular/core';\r\nimport { DraggableComponent } from '../draggable/draggable.component';\r\nimport SmoothDnD, { constants, dropHandlers } from 'smooth-dnd';\r\nimport { wrappedError } from '@angular/core/src/error_handler';\r\n\r\nSmoothDnD.wrapChild = (child) => {\r\n  return child;\r\n}\r\n\r\nSmoothDnD.dropHandler =  dropHandlers.reactDropHandler().handler;\r\n\r\nconst {\r\n  wrapperClass,\r\n  animationClass\r\n} = constants;\r\n\r\nconst wrapperConstantClasses = {\r\n  [wrapperClass]: true,\r\n  [animationClass]: true,\r\n};\r\n// tslint:disable:no-output-on-prefix\r\nexport interface IDropResult {\r\n  removedIndex: number,\r\n  addedIndex: number,\r\n  payload: any,\r\n  element: Element,\r\n}\r\n\r\nexport type IPayload = any;\r\n\r\nexport interface IContainerOptions {\r\n  orientation?: string;\r\n  behaviour?: string;\r\n  groupName?: string;\r\n  lockAxis?: string;\r\n  dragHandleSelector?: string;\r\n  nonDragAreaSelector?: string;\r\n  dragBeginDelay?: number;\r\n  animationDuration?: number;\r\n  autoScrollEnabled?: boolean;\r\n  dragClass?: string;\r\n  dropClass?: string;\r\n  onDragStart?: (index: number, payload: IPayload) => void;\r\n  onDrop?: (dropResult: IDropResult) => void;\r\n  getChildPayload?: (index: number) => {};\r\n  shouldAnimateDrop?: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  shouldAcceptDrop?: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  onDragEnter?: () => void;\r\n  onDragLeave?: () => void;\r\n}\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'smooth-dnd-container',\r\n  template: `<div #container>\r\n    <ng-content></ng-content>\r\n</div>`\r\n})\r\nexport class ContainerComponent implements AfterViewInit, OnDestroy {  \r\n  private container: any;\r\n  @ContentChildren(DraggableComponent) draggables: QueryList<DraggableComponent>;\r\n  @ViewChild('container') containerElementRef: ElementRef;\r\n\r\n  @Input('orientation') orientation;\r\n  @Input('behaviour') behaviour;\r\n  @Input('groupName') groupName;\r\n  @Input('lockAxis') lockAxis;\r\n  @Input('dragHandleSelector') dragHandleSelector;\r\n  @Input('nonDragAreaSelector') nonDragAreaSelector;\r\n  @Input('dragBeginDelay') dragBeginDelay;\r\n  @Input('animationDuration') animationDuration;\r\n  @Input('autoScrollEnabled') autoScrollEnabled;\r\n  @Input('dragClass') dragClass;\r\n  @Input('dropClass') dropClass;\r\n\r\n  @Output() dragStart = new EventEmitter<{ index: number; payload: IPayload}>();\r\n  @Output() drop = new EventEmitter<IDropResult>();\r\n  @Input() getChildPayload: (index: number) => {};\r\n  @Input() shouldAnimateDrop: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  @Input() shouldAcceptDrop: (sourceContainerOptions: IContainerOptions, payload: IPayload) => boolean;\r\n  @Output() dragEnter = new EventEmitter();\r\n  @Output() dragLeave = new EventEmitter();\r\n\r\n  constructor(private _ngZone: NgZone) { };\r\n\r\n  ngAfterViewInit() {\r\n    this.container = SmoothDnD(this.containerElementRef.nativeElement, this.getOptions());\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.container.dispose();\r\n  }\r\n\r\n  private getOptions(): IContainerOptions {    \r\n    const options: IContainerOptions = {};\r\n    if (this.orientation) options.orientation = this.orientation;\r\n    if (this.behaviour) options.behaviour = this.behaviour;\r\n    if (this.groupName) options.groupName = this.groupName;\r\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\r\n    if (this.dragHandleSelector) options.dragHandleSelector = this.dragHandleSelector;\r\n    if (this.nonDragAreaSelector) options.nonDragAreaSelector = this.nonDragAreaSelector;\r\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\r\n    if (this.animationDuration) options.animationDuration = this.animationDuration;\r\n    if (this.autoScrollEnabled) options.autoScrollEnabled = this.autoScrollEnabled;\r\n    if (this.dragClass) options.dragClass = this.dragClass;\r\n    if (this.dropClass) options.dropClass = this.dropClass;\r\n    \r\n    if (this.dragStart) options.onDragStart = (index: number, payload: IPayload) => {\r\n      this.getNgZone(() => {\r\n        this.dragStart.emit({ index, payload });\r\n      })\r\n    };\r\n\r\n    if (this.drop) options.onDrop = (dropResult: IDropResult) => {\r\n      this.getNgZone(() => {\r\n        this.drop.emit(dropResult);\r\n      })\r\n    };\r\n\r\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\r\n    if (this.shouldAnimateDrop) options.shouldAnimateDrop = this.shouldAnimateDrop;\r\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\r\n\r\n    if (this.dragEnter) options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\r\n    if (this.dragLeave) options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\r\n\r\n    return options;\r\n  }\r\n\r\n  private getNgZone(clb) {\r\n    this._ngZone.run(() => {\r\n      clb();\r\n    });\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './container/container.component';\r\nimport { DraggableComponent } from './draggable/draggable.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ContainerComponent, DraggableComponent],\r\n  exports: [ContainerComponent, DraggableComponent]\r\n})\r\nexport class NgxSmoothDnDModule {}\r\n"
  ],
  "names": [
    "wrapperClass",
    "constants",
    "animationClass",
    "DraggableComponent",
    "this",
    "classList",
    "prototype",
    "ngAfterViewInit",
    "wrapper",
    "nativeElement",
    "parentElement",
    "className",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ViewChild",
    "SmoothDnD",
    "wrapChild",
    "child",
    "dropHandler",
    "dropHandlers",
    "reactDropHandler",
    "handler",
    "ContainerComponent",
    "_ngZone",
    "dragStart",
    "EventEmitter",
    "drop",
    "dragEnter",
    "dragLeave",
    "container",
    "containerElementRef",
    "getOptions",
    "ngOnDestroy",
    "dispose",
    "_this",
    "options",
    "orientation",
    "behaviour",
    "groupName",
    "lockAxis",
    "dragHandleSelector",
    "nonDragAreaSelector",
    "dragBeginDelay",
    "animationDuration",
    "autoScrollEnabled",
    "dragClass",
    "dropClass",
    "onDragStart",
    "index",
    "payload",
    "getNgZone",
    "emit",
    "onDrop",
    "dropResult",
    "getChildPayload",
    "shouldAnimateDrop",
    "shouldAcceptDrop",
    "onDragEnter",
    "onDragLeave",
    "clb",
    "run",
    "NgZone",
    "draggables",
    "ContentChildren",
    "Input",
    "Output",
    "NgxSmoothDnDModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
